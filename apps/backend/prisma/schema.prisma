// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemSettings {
  id                    Int           @id @default(autoincrement())
  unique                Boolean       @unique @default(true)
  discordGuildId        String
  defaultEventChannel   EventChannel? @relation(fields: [defaultEventChannelId], references: [id])
  defaultEventChannelId Int?          @unique
  roleOrder             String[]
  updatedAt             DateTime      @updatedAt
  createdAt             DateTime      @default(now())
}

model UserSession {
  sid       String   @id
  data      String   @db.VarChar(4096)
  deviceId  String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  expiresAt DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model UserSettings {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model UserStatus {
  id        Int      @id @default(autoincrement())
  activity  String?
  ship      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model UserRole {
  id                       String                        @id @default(uuid())
  name                     String                        @unique
  discordId                String?                       @unique
  primary                  Boolean                       @default(false)
  permissions              Int
  users                    UsersInUserRoles[]
  primaryUsers             User[]
  eventsUsingRoleForAccess EventsWithUserRoleForAccess[]
  updatedAt                DateTime                      @updatedAt
  createdAt                DateTime                      @default(now())
}

model User {
  id            String             @id @default(uuid())
  discordId     String             @unique
  discordName   String
  scName        String?
  scVerified    Boolean
  scVerifyCode  String?
  avatarUrl     String
  primaryRole   UserRole           @relation(fields: [primaryRoleId], references: [id])
  primaryRoleId String
  roles         UsersInUserRoles[]
  rsvps         EventUser[]
  events        Event[]
  sessions      UserSession[]
  status        UserStatus?
  settings      UserSettings?
  updatedAt     DateTime           @updatedAt
  createdAt     DateTime           @default(now())
}

model UsersInUserRoles {
  role       UserRole @relation(fields: [roleId], references: [id])
  roleId     String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  assignedAt DateTime @default(now())

  @@id([roleId, userId])
}

model EventRsvpRole {
  id        String      @id @default(uuid())
  name      String
  emoji     String
  emojiId   String
  limit     Int         @default(0)
  members   EventUser[]
  event     Event       @relation(fields: [eventId], references: [id])
  eventId   String
  updatedAt DateTime    @updatedAt
  createdAt DateTime    @default(now())
}

model EventUser {
  id        String        @id @default(uuid())
  pending   Boolean
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  rsvp      EventRsvpRole @relation(fields: [rsvpId], references: [id])
  rsvpId    String
  event     Event         @relation(fields: [eventId], references: [id])
  eventId   String
  updatedAt DateTime      @updatedAt
  createdAt DateTime      @default(now())
}

model EventSettings {
  id                 Int      @id @default(autoincrement())
  hideLocation       Boolean
  inviteOnly         Boolean
  openToJoinRequests Boolean
  allowTeamSwitching Boolean
  allowCrewSwitching Boolean
  event              Event    @relation(fields: [eventId], references: [id])
  eventId            String   @unique
  updatedAt          DateTime @updatedAt
  createdAt          DateTime @default(now())
}

model Event {
  id                    String                        @id @default(uuid())
  owner                 User                          @relation(fields: [ownerId], references: [id])
  ownerId               String
  channel               EventChannel                  @relation(fields: [channelId], references: [id])
  channelId             Int
  discordThreadId       String?
  discordRoleId         String?
  discordEventMessageId String?
  discordStartMessageId String?
  discordMentions       String[]
  name                  String
  summary               String
  description           String                        @db.VarChar(2048)
  imageUrl              String?                       @db.VarChar(2084)
  eventType             String?
  location              String[]
  roles                 EventRsvpRole[]
  members               EventUser[]
  settings              EventSettings?
  accessType            String
  accessRoles           EventsWithUserRoleForAccess[]
  startAt               DateTime?
  endedAt               DateTime?
  duration              Int?
  posted                Boolean
  updatedAt             DateTime                      @updatedAt
  createdAt             DateTime                      @default(now())
}

model EventsWithUserRoleForAccess {
  role       UserRole @relation(fields: [roleId], references: [id])
  roleId     String
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  assignedAt DateTime @default(now())

  @@id([roleId, eventId])
}

model EventChannel {
  id             Int             @id @default(autoincrement())
  discordId      String          @unique
  events         Event[]
  systemSettings SystemSettings?
  updatedAt      DateTime        @updatedAt
  createdAt      DateTime        @default(now())
}
