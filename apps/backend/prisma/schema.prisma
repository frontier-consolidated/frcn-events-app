// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemSettings {
  id                    Int           @id @default(autoincrement())
  unique                Boolean       @unique @default(true)
  discordGuildId        String        @map("discord_guild_id")
  defaultEventChannel   EventChannel? @relation(fields: [defaultEventChannelId], references: [id])
  defaultEventChannelId Int?          @unique @map("default_event_channel_id")
  roleOrder             String[]      @map("role_order")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  createdAt             DateTime      @default(now()) @map("created_at")

  @@map("system_settings")
}

model UserSession {
  sid       String   @id
  data      String   @db.VarChar(4096)
  deviceId  String   @map("device_id")
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  expiresAt DateTime @map("expires_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_sessions")
}

model UserSettings {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_settings")
}

model UserStatus {
  id        Int      @id @default(autoincrement())
  activity  String?
  ship      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_statuses")
}

model UserRole {
  id                       String                        @id @default(uuid())
  name                     String
  discordId                String?                       @unique @map("discord_id")
  primary                  Boolean                       @default(false)
  permissions              Int
  users                    UsersInUserRoles[]
  primaryUsers             User[]
  eventsUsingRoleForAccess EventsWithUserRoleForAccess[]
  updatedAt                DateTime                      @updatedAt @map("updated_at")
  createdAt                DateTime                      @default(now()) @map("created_at")

  @@map("user_roles")
}

model User {
  id              String             @id @default(uuid())
  discordId       String             @unique @map("discord_id")
  discordName     String             @map("discord_name")
  discordUsername String             @map("discord_username")
  scName          String?            @map("sc_name")
  scVerified      Boolean            @map("sc_verified")
  scVerifyCode    String?            @map("sc_verify_code")
  avatarUrl       String             @map("avatar_url")
  primaryRole     UserRole           @relation(fields: [primaryRoleId], references: [id])
  primaryRoleId   String             @map("primary_role_id")
  roles           UsersInUserRoles[]
  rsvps           EventUser[]
  events          Event[]
  resources       Resource[]
  sessions        UserSession[]
  status          UserStatus?
  settings        UserSettings?
  fileUploads     FileUpload[]
  updatedAt       DateTime           @updatedAt @map("updated_at")
  createdAt       DateTime           @default(now()) @map("created_at")

  @@map("users")
}

model UsersInUserRoles {
  role       UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String   @map("role_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([roleId, userId])
  @@map("users__user_roles")
}

model EventRsvpRole {
  id        String      @id @default(uuid())
  name      String
  emoji     String
  emojiId   String      @map("emoji_id")
  limit     Int         @default(0)
  members   EventUser[]
  event     Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String      @map("event_id")
  updatedAt DateTime    @updatedAt @map("updated_at")
  createdAt DateTime    @default(now()) @map("created_at")

  @@map("event_rsvp_roles")
}

model EventUser {
  id        String         @id @default(uuid())
  pending   Boolean
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String         @map("user_id")
  rsvp      EventRsvpRole? @relation(fields: [rsvpId], references: [id])
  rsvpId    String?        @map("rsvp_id")
  event     Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String         @map("event_id")
  updatedAt DateTime       @updatedAt @map("updated_at")
  createdAt DateTime       @default(now()) @map("created_at")

  @@map("event_users")
}

model EventSettings {
  id                 Int      @id @default(autoincrement())
  hideLocation       Boolean  @map("hide_location")
  inviteOnly         Boolean  @map("invite_only")
  openToJoinRequests Boolean  @map("open_to_join_requests")
  allowTeamSwitching Boolean  @map("allow_team_switching")
  event              Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId            String   @unique @map("event_id")
  updatedAt          DateTime @updatedAt @map("updated_at")
  createdAt          DateTime @default(now()) @map("created_at")

  @@map("event_settings")
}

model Event {
  id                    String                        @id @default(uuid())
  owner                 User?                         @relation(fields: [ownerId], references: [id])
  ownerId               String?                       @map("owner_id")
  channel               EventChannel?                 @relation(fields: [channelId], references: [id])
  channelId             Int?                          @map("channel_id")
  discordThreadId       String?                       @map("discord_thread_id")
  discordRoleId         String?                       @map("discord_role_id")
  discordEventMessageId String?                       @map("discord_event_message_id")
  discordStartMessageId String?                       @map("discord_start_message_id")
  discordMentions       String[]                      @map("discord_mentions")
  name                  String
  summary               String
  description           String                        @db.VarChar(2048)
  imageUrl              String?                       @map("image_url") @db.VarChar(2084)
  eventType             String?                       @map("event_type")
  location              String[]
  roles                 EventRsvpRole[]
  members               EventUser[]
  settings              EventSettings?
  accessType            String                        @map("access_type")
  accessRoles           EventsWithUserRoleForAccess[]
  startAt               DateTime?                     @map("start_at")
  endedAt               DateTime?                     @map("ended_at")
  duration              Int?
  posted                Boolean
  updatedAt             DateTime                      @updatedAt @map("updated_at")
  createdAt             DateTime                      @default(now()) @map("created_at")

  @@map("events")
}

model EventsWithUserRoleForAccess {
  role       UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String   @map("role_id")
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String   @map("event_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([roleId, eventId])
  @@map("events__user_roles")
}

model EventChannel {
  id             Int             @id @default(autoincrement())
  discordId      String          @unique @map("discord_id")
  events         Event[]
  systemSettings SystemSettings?
  updatedAt      DateTime        @updatedAt @map("updated_at")
  createdAt      DateTime        @default(now()) @map("created_at")

  @@map("event_channels")
}

model FileUpload {
  id            String                 @id @default(uuid())
  key           String
  owner         User?                  @relation(fields: [ownerId], references: [id])
  ownerId       String?                @map("owner_id")
  fileName      String                 @map("file_name")
  fileSizeKb    Int                    @map("file_size_kb")
  contentType   String                 @map("content_type")
  resources     Resource[]
  cmsContainers ContentContainerFile[]
  updatedAt     DateTime               @updatedAt @map("updated_at")
  createdAt     DateTime               @default(now()) @map("created_at")

  @@map("file_uploads")
}

model Resource {
  id               String      @id @default(uuid())
  owner            User?       @relation(fields: [ownerId], references: [id])
  ownerId          String?     @map("owner_id")
  name             String
  shortDescription String      @map("short_description") @db.VarChar(512)
  tags             String[]
  canPreview       Boolean     @default(false) @map("can_preview")
  file             FileUpload? @relation(fields: [fileId], references: [id])
  fileId           String?
  updatedAt        DateTime    @updatedAt @map("updated_at")
  createdAt        DateTime    @default(now()) @map("created_at")

  @@map("resources")
}

model ContentContainer {
  id            Int                    @id @default(autoincrement())
  identifier    String?                @unique
  type          String
  title         String
  content       String?
  files         ContentContainerFile[]
  children      ContentContainer[]     @relation(name: "container_hierarchy")
  childrenOrder String[]               @map("children_order")
  parent        ContentContainer?      @relation(name: "container_hierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      Int?                   @map("parent_id")
  updatedAt     DateTime               @updatedAt @map("updated_at")
  createdAt     DateTime               @default(now()) @map("created_at")

  @@map("cms_container")
}

model ContentContainerFile {
  id          Int              @id @default(autoincrement())
  container   ContentContainer @relation(fields: [containerId], references: [id], onDelete: Cascade)
  containerId Int
  file        FileUpload       @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String

  @@map("cms_container__file_link")
}
